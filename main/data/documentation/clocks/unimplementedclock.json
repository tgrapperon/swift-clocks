{"seeAlsoSections":[{"title":"Implementations","identifiers":["doc:\/\/Clocks\/documentation\/Clocks\/ImmediateClock","doc:\/\/Clocks\/documentation\/Clocks\/TestClock"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"UnimplementedClock"}],"role":"symbol","title":"UnimplementedClock","roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedClock"}],"symbolKind":"class","externalID":"s:6Clocks18UnimplementedClockC","modules":[{"name":"Clocks"}],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"16.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"16.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"9.0","deprecated":false}]},"abstract":[{"type":"text","text":"A clock that causes an XCTest failure when any of its endpoints are invoked."}],"sections":[],"identifier":{"url":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/Clocks\/s8SendableP","doc:\/\/Clocks\/12_Concurrency5ClockP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/Clocks\/documentation\/Clocks"]]},"topicSections":[{"title":"Creating unimplemented clocks","identifiers":["doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/init(name:now:)","doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/init(name:)"]},{"title":"Structures","identifiers":["doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/Instant"]},{"title":"Instance Properties","identifiers":["doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/minimumResolution","doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/name","doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/now"]},{"title":"Instance Methods","identifiers":["doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/sleep(until:tolerance:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/Clock-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/clocks\/unimplementedclock"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedClock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Duration"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"DurationProtocol","preciseIdentifier":"s:s16DurationProtocolP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test is useful when a clock dependency must be provided to test a feature, but you don’t"},{"type":"text","text":" "},{"type":"text","text":"actually expect time-based asynchrony to occur in the particular execution flow you are"},{"type":"text","text":" "},{"type":"text","text":"exercising."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, consider the following model that encapsulates the behavior of being able to"},{"type":"text","text":" "},{"type":"text","text":"increment and decrement a count, as well as starting and stopping a timer that increments"},{"type":"text","text":" "},{"type":"text","text":"the counter every second:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class FeatureModel: ObservableObject {","  @Published var count = 0","  let clock: any Clock<Duration>","  var timerTask: Task<Void, Error>?","","  init(clock: any Clock<Duration>) {","    self.clock = clock","  }","  func incrementButtonTapped() {","    self.count += 1","  }","  func decrementButtonTapped() {","    self.count -= 1","  }","  func startTimerButtonTapped() {","    self.timerTask = Task {","      for await _ in self.clock.timer(interval: .seconds(5)) {","        self.count += 1","      }","    }","  }","  func stopTimerButtonTapped() {","    self.timerTask?.cancel()","    self.timerTask = nil","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we test the flow of the user incrementing and decrementing the count, there is no need for"},{"type":"text","text":" "},{"type":"text","text":"the clock. We don’t expect any time-based asynchrony to occur. To make this clear, we can"},{"type":"text","text":" "},{"type":"text","text":"use an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrementDecrement() {","  let model = FeatureModel(clock: .unimplemented)","","  XCTAssertEqual(model.count, 0)","  self.model.incrementButtonTapped()","  XCTAssertEqual(model.count, 1)","  self.model.decrementButtonTapped()","  XCTAssertEqual(model.count, 0)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If this test passes it definitively proves that the clock is not used at all in the user flow"},{"type":"text","text":" "},{"type":"text","text":"being tested, making this test stronger. If in the future the increment and decrement endpoints"},{"type":"text","text":" "},{"type":"text","text":"start making use of time-based asynchrony using the clock, we will be instantly notified by test"},{"type":"text","text":" "},{"type":"text","text":"failures. This will help us find the tests that should be updated to assert on the new behavior"},{"type":"text","text":" "},{"type":"text","text":"in the feature."}]}]}],"references":{"doc://Clocks/documentation/Clocks/UnimplementedClock/name":{"role":"symbol","title":"name","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"The name of the clock."}],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/name","kind":"symbol","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/name"},"doc://Clocks/documentation/Clocks/TestClock":{"role":"symbol","title":"TestClock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestClock"}],"abstract":[{"type":"text","text":"A clock whose time can be controlled in a deterministic manner."}],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/TestClock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestClock"}],"url":"\/documentation\/clocks\/testclock"},"doc://Clocks/documentation/Clocks/UnimplementedClock":{"role":"symbol","title":"UnimplementedClock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedClock"}],"abstract":[{"type":"text","text":"A clock that causes an XCTest failure when any of its endpoints are invoked."}],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnimplementedClock"}],"url":"\/documentation\/clocks\/unimplementedclock"},"doc://Clocks/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Clocks\/s8SendableP"},"doc://Clocks/documentation/Clocks/UnimplementedClock/init(name:now:)":{"role":"symbol","title":"init(name:now:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnimplementedClock","preciseIdentifier":"s:6Clocks18UnimplementedClockC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Instant","preciseIdentifier":"s:6Clocks18UnimplementedClockC7InstantV"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/init(name:now:)","kind":"symbol","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/init(name:now:)"},"doc://Clocks/documentation/Clocks/UnimplementedClock/Instant":{"role":"symbol","title":"UnimplementedClock.Instant","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Instant"}],"abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/Instant","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Instant"}],"url":"\/documentation\/clocks\/unimplementedclock\/instant"},"doc://Clocks/documentation/Clocks/UnimplementedClock/Clock-Implementations":{"role":"collectionGroup","title":"Clock Implementations","abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/Clock-Implementations","kind":"article","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/clock-implementations"},"doc://Clocks/documentation/Clocks/UnimplementedClock/sleep(until:tolerance:)":{"role":"symbol","title":"sleep(until:tolerance:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sleep"},{"kind":"text","text":"("},{"kind":"externalParam","text":"until"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnimplementedClock","preciseIdentifier":"s:6Clocks18UnimplementedClockC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Instant","preciseIdentifier":"s:6Clocks18UnimplementedClockC7InstantV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnimplementedClock","preciseIdentifier":"s:6Clocks18UnimplementedClockC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Instant","preciseIdentifier":"s:6Clocks18UnimplementedClockC7InstantV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/sleep(until:tolerance:)","kind":"symbol","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/sleep(until:tolerance:)"},"doc://Clocks/12_Concurrency5ClockP":{"type":"unresolvable","title":"_Concurrency.Clock","identifier":"doc:\/\/Clocks\/12_Concurrency5ClockP"},"doc://Clocks/documentation/Clocks/UnimplementedClock/now":{"role":"symbol","title":"now","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"now"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnimplementedClock","preciseIdentifier":"s:6Clocks18UnimplementedClockC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Instant","preciseIdentifier":"s:6Clocks18UnimplementedClockC7InstantV"}],"abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/now","kind":"symbol","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/now"},"doc://Clocks/documentation/Clocks/ImmediateClock":{"role":"symbol","title":"ImmediateClock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImmediateClock"}],"abstract":[{"type":"text","text":"A clock that does not suspend when sleeping."}],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/ImmediateClock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ImmediateClock"}],"url":"\/documentation\/clocks\/immediateclock"},"doc://Clocks/documentation/Clocks":{"role":"collection","title":"Clocks","abstract":[{"type":"text","text":"A few clocks that make working with Swift concurrency more testable and more versatile."}],"identifier":"doc:\/\/Clocks\/documentation\/Clocks","kind":"symbol","type":"topic","url":"\/documentation\/clocks"},"doc://Clocks/documentation/Clocks/UnimplementedClock/minimumResolution":{"role":"symbol","title":"minimumResolution","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimumResolution"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Duration"}],"abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/minimumResolution","kind":"symbol","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/minimumresolution"},"doc://Clocks/documentation/Clocks/UnimplementedClock/init(name:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Duration"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Duration"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(name:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/Clocks\/documentation\/Clocks\/UnimplementedClock\/init(name:)","kind":"symbol","type":"topic","url":"\/documentation\/clocks\/unimplementedclock\/init(name:)"}}}